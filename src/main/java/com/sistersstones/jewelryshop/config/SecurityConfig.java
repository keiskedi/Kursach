package com.sistersstones.jewelryshop.config;

import com.sistersstones.jewelryshop.security.CustomAuthenticationSuccessHandler;
import com.sistersstones.jewelryshop.security.CustomUserDetailsService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;

@Configuration
public class SecurityConfig {

    private final CustomUserDetailsService userDetailsService;

    public SecurityConfig(CustomUserDetailsService userDetailsService) {
        this.userDetailsService = userDetailsService;
    }

    // üîê –ì–æ–ª–æ–≤–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–µ–∑–ø–µ–∫–∏
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // –º–æ–∂–Ω–∞ –≤–∫–ª—é—á–∏—Ç–∏, —è–∫—â–æ –±—É–¥–µ CSRF-—Ç–æ–∫–µ–Ω —É —Ñ–æ—Ä–º—ñ

            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/", "/register", "/login", "/css/**", "/images/**").permitAll() // –≤—ñ–¥–∫—Ä–∏—Ç—ñ –º–∞—Ä—à—Ä—É—Ç–∏
                .requestMatchers("/admin/**").hasRole("ADMIN") // –∑–∞—Ö–∏—â–µ–Ω–æ –¥–ª—è ADMIN
                .anyRequest().authenticated() // –≤—Å–µ —ñ–Ω—à–µ ‚Äî —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É
            )

            .formLogin(form -> form
                .loginPage("/login") // —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ª–æ–≥—ñ–Ω—É (HTML-—Ñ–æ—Ä–º–∞)
                .loginProcessingUrl("/login") // –∫—É–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è —Ñ–æ—Ä–º–∞
                .successHandler(authenticationSuccessHandler()) // –æ–±—Ä–æ–±–∫–∞ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É
                .permitAll()
            )

            .logout(logout -> logout
                .logoutSuccessUrl("/") // –≤–∏—Ö—ñ–¥ ‚Äî –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
                .permitAll()
            );

        return http.build();
    }

    // üîë –û–±—Ä–æ–±–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ª–æ–≥—ñ–Ω—É (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞ —Ä–æ–ª–ª—é)
    @Bean
    public AuthenticationSuccessHandler authenticationSuccessHandler() {
        return new CustomAuthenticationSuccessHandler();
    }

    // üîê –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }

    // üîê –ï–Ω–∫–æ–¥–µ—Ä –¥–ª—è –ø–∞—Ä–æ–ª—ñ–≤
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
